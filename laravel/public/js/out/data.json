{
    "project": {},
    "files": {
        "courses.js": {
            "name": "courses.js",
            "modules": {},
            "classes": {
                "Courses": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "forms.js": {
            "name": "forms.js",
            "modules": {},
            "classes": {
                "Forms": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "main.js": {
            "name": "main.js",
            "modules": {},
            "classes": {
                "Main": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "validations.js": {
            "name": "validations.js",
            "modules": {},
            "classes": {
                "Validations": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "videoUploader.js": {
            "name": "videoUploader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Courses": {
            "name": "Courses",
            "shortname": "Courses",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "courses.js",
            "line": 1,
            "description": "Contains form related reusable functions and event listeners"
        },
        "Forms": {
            "name": "Forms",
            "shortname": "Forms",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "forms.js",
            "line": 1,
            "description": "Contains form related reusable functions and event listeners"
        },
        "Main": {
            "name": "Main",
            "shortname": "Main",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "main.js",
            "line": 1,
            "description": "Contains generic reusable functions and event listeners"
        },
        "Validations": {
            "name": "Validations",
            "shortname": "Validations",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "validations.js",
            "line": 1,
            "description": "Contains validation functions and event handlers"
        }
    },
    "classitems": [
        {
            "file": "courses.js",
            "line": 32,
            "description": "Enables Drag and Drop sorting for dynamically added lessons",
            "itemtype": "method",
            "name": "sortablizeLessons",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the UL element containing the list",
                    "type": "String"
                }
            ],
            "class": "Courses"
        },
        {
            "file": "courses.js",
            "line": 48,
            "description": "Recalculates the lesson order within the module",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the UL element containing the list",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "reorderLessons",
            "class": "Courses"
        },
        {
            "file": "courses.js",
            "line": 63,
            "description": "Called after course creations, sets the step 2 form action attribute",
            "itemtype": "method",
            "name": "prepareCourseDetails",
            "params": [
                {
                    "name": "json",
                    "description": "JSON response from the create course action",
                    "type": "Object"
                }
            ],
            "class": "Courses"
        },
        {
            "file": "courses.js",
            "line": 75,
            "description": "Event handler for click on .add-module<br />\nAdds a new Module under the current course",
            "itemtype": "method",
            "name": "addModule",
            "params": [
                {
                    "name": "e",
                    "description": "The json response of the create module call",
                    "type": "Json"
                }
            ],
            "class": "Courses"
        },
        {
            "file": "courses.js",
            "line": 91,
            "description": "Event handler for click on .add-lesson<br />\nAdds a lesson under the selected module",
            "params": [
                {
                    "name": "e",
                    "description": "The json response of the create module call",
                    "type": "Json"
                }
            ],
            "itemtype": "method",
            "name": "addLesson",
            "class": "Courses"
        },
        {
            "file": "courses.js",
            "line": 102,
            "description": "Activates TinyMCE when the text tab of a lesson is loaded",
            "params": [
                {
                    "name": "e",
                    "description": "The event containing the calling object",
                    "type": "Event"
                }
            ],
            "itemtype": "method",
            "name": "enableLessonRTE",
            "class": "Courses"
        },
        {
            "file": "courses.js",
            "line": 130,
            "description": "Called after the files tab of a lesson is loaded, it ajaxifies the file upload form",
            "params": [
                {
                    "name": "e",
                    "description": "The original event containing the calling object",
                    "type": "Event"
                }
            ],
            "itemtype": "method",
            "name": "enableBlockFileUploader",
            "class": "Courses"
        },
        {
            "file": "courses.js",
            "line": 140,
            "description": "Called after the lesson file has been uploaded, it resets the progress bar \nand includes the new object in the UI",
            "params": [
                {
                    "name": "e",
                    "description": "The original event",
                    "type": "Event"
                },
                {
                    "name": "data",
                    "description": "The upload result object",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "blockFileUploaded",
            "class": "Courses"
        },
        {
            "file": "courses.js",
            "line": 159,
            "description": "Called before ajax uploading a lesson file, it limits the number of files that can be uploaded",
            "params": [
                {
                    "name": "e",
                    "description": "The original event",
                    "type": "Event"
                },
                {
                    "name": "data",
                    "description": "The upload result object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "False if file can't be uploaded, true otherwise",
                "type": "Boolean"
            },
            "class": "Courses"
        },
        {
            "file": "courses.js",
            "line": 174,
            "description": "Called after a course preview/banner image is uploaded, it appends the new element to the list and clears the progressbar",
            "params": [
                {
                    "name": "e",
                    "description": "The original event",
                    "type": "Event"
                },
                {
                    "name": "data",
                    "description": "The upload result object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "Courses"
        },
        {
            "file": "forms.js",
            "line": 16,
            "description": "Event handler for .ajax-form<br />\nSubmits forms with .ajax-form class via ajax and fires the data-callback function if specified",
            "itemtype": "method",
            "name": "formAjaxSubmit",
            "params": [
                {
                    "name": "e",
                    "description": "Submit event",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "False",
                "type": "Boolean"
            },
            "class": "Forms"
        },
        {
            "file": "forms.js",
            "line": 43,
            "description": "Event handler for forms.<br />\nCalled on all forms when they're submitted. It replaces the submit button label with \"Processing...[loader icon]\" \nand stores the old value in data-old-label attribute.",
            "itemtype": "method",
            "name": "submittedFormButton",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "Forms"
        },
        {
            "file": "forms.js",
            "line": 56,
            "description": "Restores the form's submit button original label",
            "itemtype": "method",
            "name": "restoreSubmitLabel",
            "params": [
                {
                    "name": "$form",
                    "description": "",
                    "type": "JQuery form"
                }
            ],
            "class": "Forms"
        },
        {
            "file": "forms.js",
            "line": 66,
            "description": "Event handler for  .delete-button.<br />\nFired by click on .delete-button and asks for confirmation",
            "itemtype": "method",
            "name": "confirmDelete",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "True if confirmed, false otherwise",
                "type": "Bool"
            },
            "class": "Forms"
        },
        {
            "file": "forms.js",
            "line": 84,
            "description": "Event handler for .has-slug<br />\nIs called on keyup event for elements with .has-slug class. It takes the elements value \nand populates another field specified by the elements data-slug-target attribute with\nthe slug version of the value",
            "itemtype": "method",
            "name": "updateSlug",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "null",
                "type": "Null"
            },
            "class": "Forms"
        },
        {
            "file": "forms.js",
            "line": 99,
            "description": "Populates a second dropdown specified by 'data-target' with the values \nreturned by the get call to the resource at data-url",
            "itemtype": "method",
            "name": "populateDropdown",
            "params": [
                {
                    "name": "elem",
                    "description": "HTML dropdown",
                    "type": "Object"
                }
            ],
            "class": "Forms"
        },
        {
            "file": "forms.js",
            "line": 124,
            "description": "Event handler for .clonable inputs.<br />\nFired on keyup on an empty clonable input - it creates a set of \ninput+delete button after the calling element",
            "params": [
                {
                    "name": "e",
                    "description": "keyup event",
                    "type": "Event"
                }
            ],
            "class": "Forms"
        },
        {
            "file": "forms.js",
            "line": 158,
            "description": "Renumbers the position label under clonable inputs",
            "itemtype": "method",
            "name": "reorderClonable",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the clonable inputs",
                    "type": "String"
                }
            ],
            "class": "Forms"
        },
        {
            "file": "forms.js",
            "line": 171,
            "description": "Event handler for click on .delete-clonable buttons<br />\nDeletes the clonable input and associated delete button",
            "params": [
                {
                    "name": "e",
                    "description": "Click event",
                    "type": "Event"
                }
            ],
            "class": "Forms"
        },
        {
            "file": "forms.js",
            "line": 187,
            "description": "Called after an AJAX delete call, removes the specified HTML element",
            "itemtype": "method",
            "name": "deleteItem",
            "params": [
                {
                    "name": "result",
                    "description": "The ajax call json response",
                    "type": "Json"
                },
                {
                    "name": "event",
                    "description": "The original submit event",
                    "type": "Event"
                }
            ],
            "class": "Forms"
        },
        {
            "file": "forms.js",
            "line": 213,
            "description": "Displays a saving animation when called with a 0 param, ends it when called with a 1 param",
            "params": [
                {
                    "name": "stop",
                    "description": "zero to start the animation, 1 to end it",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "savingAnimation",
            "class": "Forms"
        },
        {
            "file": "forms.js",
            "line": 238,
            "description": "Enables AJAX file uploading for the specified element",
            "params": [
                {
                    "name": "$uploader",
                    "description": "The file object that is ajaxified",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "enableFileUploader",
            "class": "Forms"
        },
        {
            "file": "forms.js",
            "line": 274,
            "description": "Displays saving animation after ajax form is submitted",
            "itemtype": "method",
            "name": "formSaved",
            "class": "Forms"
        },
        {
            "file": "forms.js",
            "line": 283,
            "description": "Converts the supplied element into a slider object",
            "params": [
                {
                    "name": "selector",
                    "description": "The css selector of the element to be converted",
                    "type": "String"
                }
            ],
            "class": "Forms"
        },
        {
            "file": "forms.js",
            "line": 295,
            "description": "Sets a slider control's value to the value of the calling input",
            "params": [
                {
                    "name": "e",
                    "description": "The change event fired by the calling input",
                    "type": "Event"
                }
            ],
            "itemtype": "method",
            "name": "setSlider",
            "class": "Forms"
        },
        {
            "file": "main.js",
            "line": 17,
            "description": "Returns a slug version of the supplied string",
            "itemtype": "method",
            "name": "convertToSlug",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the slug",
                "type": "String"
            },
            "class": "Main"
        },
        {
            "file": "main.js",
            "line": 27,
            "description": "Redirects the window to the specified URL",
            "itemtype": "method",
            "name": "followRedirect",
            "params": [
                {
                    "name": "An",
                    "description": "ovject with an URL property, usually a JSON response",
                    "type": "Object"
                }
            ],
            "class": "Main"
        },
        {
            "file": "main.js",
            "line": 37,
            "description": "Static unique numbers holder. Used to keep track of used numbers",
            "itemtype": "property",
            "name": "unique_numbers",
            "type": "{Array}",
            "class": "Main"
        },
        {
            "file": "main.js",
            "line": 44,
            "description": "Returns a document-wide unique number",
            "itemtype": "method",
            "name": "uniqueID",
            "return": {
                "description": "The unique number",
                "type": "Number"
            },
            "class": "Main"
        },
        {
            "file": "main.js",
            "line": 60,
            "description": "Removes the hidden class of the supplied identifier and scrolls to it",
            "params": [
                {
                    "name": "elem",
                    "description": "CSS selector",
                    "type": "String"
                }
            ],
            "class": "Main"
        },
        {
            "file": "main.js",
            "line": 107,
            "description": "Slide toggles an element defined by the caller's data-target attribute",
            "itemtype": "method",
            "name": "slideToggle",
            "params": [
                {
                    "name": "e",
                    "description": "The click event",
                    "type": "Event"
                }
            ],
            "class": "Main"
        },
        {
            "file": "main.js",
            "line": 117,
            "description": "Event handler for a.load-remote<br />\nIt loads the resource specified at data-url into the element specified at data-target",
            "params": [
                {
                    "name": "e",
                    "description": "Click event",
                    "type": "Event"
                }
            ],
            "itemtype": "method",
            "name": "loadRemote",
            "class": "Main"
        },
        {
            "file": "main.js",
            "line": 144,
            "description": "Similar to loadRemote, it loads the resource, but only once, later requests just display the content already loaded",
            "params": [
                {
                    "name": "e",
                    "description": "Click event",
                    "type": "Event"
                }
            ],
            "itemtype": "method",
            "name": "loadRemoteCache",
            "class": "Main"
        },
        {
            "file": "main.js",
            "line": 197,
            "description": "This function fixes the navigation menu at the top of the page\non scroll.",
            "class": "Main"
        },
        {
            "file": "main.js",
            "line": 250,
            "description": "Appends the HTML property of the result of an ajax call to the specified destination element",
            "params": [
                {
                    "name": "json",
                    "description": "The ajax response",
                    "type": "Json"
                },
                {
                    "name": "e",
                    "description": "the original event",
                    "type": "Event"
                }
            ],
            "itemtype": "method",
            "name": "addToList",
            "class": "Main"
        },
        {
            "file": "main.js",
            "line": 261,
            "description": "Replace an existing element with the one returned by an upload script",
            "params": [
                {
                    "name": "e",
                    "description": "the original event",
                    "type": "Event"
                },
                {
                    "name": "data",
                    "description": "the upload result",
                    "type": "Json"
                }
            ],
            "itemtype": "method",
            "name": "replaceElementWithUploaded",
            "class": "Main"
        },
        {
            "file": "validations.js",
            "line": 12,
            "description": "Event Listener for .instant-valid class.<br />\nFired by keyup on elements with the .instant-valid class and triggers  valid/invalid \nparsley events and callbacks for current element",
            "itemtype": "method",
            "name": "fieldInstantValidCallback",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "True if the element was valid, false otherwise",
                "type": "Bool"
            },
            "class": "Validations"
        },
        {
            "file": "validations.js",
            "line": 41,
            "description": "Event listener for parsley:field:success.<br />\nFires a form callback (data-form-valid-callback) if all elements within the form are valid",
            "itemtype": "method",
            "name": "formValidCallback",
            "params": [
                {
                    "name": "event",
                    "description": "e"
                }
            ],
            "return": {
                "description": "bool - True on fired, false otherwise"
            },
            "class": "Validations"
        },
        {
            "file": "validations.js",
            "line": 72,
            "description": "Called by fieldInstantValidCallback() - Fires the invalid form callback (specified by the data-form-valid-callback\nattr of e.target) if specified",
            "itemtype": "method",
            "name": "formInvalidCallback",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "Validations"
        },
        {
            "file": "validations.js",
            "line": 91,
            "description": "Adds a green border to an element",
            "itemtype": "method",
            "name": "appendGreenBorder",
            "params": [
                {
                    "name": "$element",
                    "description": "The html object to add the border",
                    "type": "Object"
                }
            ],
            "class": "Validations"
        },
        {
            "file": "validations.js",
            "line": 115,
            "description": "Adds a red border to the supplied element",
            "itemtype": "method",
            "name": "appendRedBorder",
            "params": [
                {
                    "name": "$element",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Validations"
        },
        {
            "file": "validations.js",
            "line": 132,
            "description": "Event listener for .instant-valid .<br />. \nAdds a green shadow and border to the active form field and highlights the next form field on validation",
            "itemtype": "method",
            "name": "highlightInput",
            "params": [
                {
                    "name": "e",
                    "description": "Focus event",
                    "type": "Event"
                }
            ],
            "class": "Validations"
        },
        {
            "file": "validations.js",
            "line": 142,
            "description": "Event listener for .delayed-valid class.<br />\nChecks if the current input is valid and fires a callback specified by\ndata-delayed-invalid-callback if invalid",
            "itemtype": "method",
            "name": "validateOnDelay",
            "params": [
                {
                    "name": "e",
                    "description": "keyup event",
                    "type": "Event"
                }
            ],
            "class": "Validations"
        },
        {
            "file": "validations.js",
            "line": 165,
            "description": "Event listener for blur on .delayed-valid.<br />\nCancel the validateOnDelay if element is blured",
            "itemtype": "method",
            "name": "cancelDelayTimer",
            "params": [
                {
                    "name": "e",
                    "description": "Blur event",
                    "type": "Event"
                }
            ],
            "class": "Validations"
        },
        {
            "file": "validations.js",
            "line": 176,
            "description": "Slides down a subtle hint if the element supplied is not valid",
            "params": [
                {
                    "name": "$element",
                    "description": "Form input",
                    "type": "Object"
                }
            ],
            "class": "Validations"
        },
        {
            "file": "videoUploader.js",
            "line": 1,
            "description": "Video uploader object using jqueryUploader for ajax upload",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " forms.js:16"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " forms.js:66"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " validations.js:41"
        },
        {
            "message": "Missing item type\nCalled before ajax uploading a lesson file, it limits the number of files that can be uploaded",
            "line": " courses.js:159"
        },
        {
            "message": "Missing item type\nCalled after a course preview/banner image is uploaded, it appends the new element to the list and clears the progressbar",
            "line": " courses.js:174"
        },
        {
            "message": "Missing item type\nEvent handler for .clonable inputs.<br />\nFired on keyup on an empty clonable input - it creates a set of \ninput+delete button after the calling element",
            "line": " forms.js:124"
        },
        {
            "message": "Missing item type\nEvent handler for click on .delete-clonable buttons<br />\nDeletes the clonable input and associated delete button",
            "line": " forms.js:171"
        },
        {
            "message": "Missing item type\nConverts the supplied element into a slider object",
            "line": " forms.js:283"
        },
        {
            "message": "Missing item type\nRemoves the hidden class of the supplied identifier and scrolls to it",
            "line": " main.js:60"
        },
        {
            "message": "Missing item type\nThis function fixes the navigation menu at the top of the page\non scroll.",
            "line": " main.js:197"
        },
        {
            "message": "Missing item type\nSlides down a subtle hint if the element supplied is not valid",
            "line": " validations.js:176"
        },
        {
            "message": "Missing item type\nVideo uploader object using jqueryUploader for ajax upload",
            "line": " videoUploader.js:1"
        }
    ]
}